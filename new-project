#!/usr/bin/env perl
#
# new-project - template for new perl scripts
#

use 5.26.0;
use warnings;
use autodie;
use diagnostics;
use utf8::all;

use Getopt::Long 'GetOptions';
use Pod::Usage 'pod2usage';
use File::Basename qw/ fileparse dirname basename /;
use Carp qw/ carp croak /;
use POSIX 'strftime';
use experimental 'switch';

## prototypes definitions

sub build_project($);
sub new_dir($);
sub new_file($);
sub use_template($);
sub save_file($$);

## variables definitions

my ( $help, $project_name );

GetOptions(
    'help'           => \$help,
    'project-name=s' => \$project_name,
);

## main program

if ($help) {
    pod2usage(2);
}
elsif ($project_name) {
    unless ( -d $project_name ) {
        build_project($project_name);
    }
}
else {
    pod2usage("$0: no args given");
}

## functions definitions

sub build_project($) {
    my $project_name = shift;
    my $project = "$ENV{HOME}/proyectos/$project_name";
    my $lib     = "$project/lib";
    my $test    = "$project/t";
    my $script  = "$project/$project_name.pl";
    my $module  = "$project/lib/$project_name.pm";
    my $readme  = "$project/README.md";
    my $licence = "$project/LICENCE";
    my $git     = "$project/.gitignore";

    # create necesary dirs
    new_dir($project);
    new_dir($lib);
    new_dir($test);

    # create necesary files
    new_file($script); 
    new_file($module);
    new_file($readme); 
    new_file($licence);
    new_file($git);

    # give permissions
    chmod 0775, $script;
    system 'git', 'init', $project;
    exec 'vim', $script;
}

sub new_dir($) {
    my $dir = shift;
    mkdir $dir unless -d $dir;
}

sub new_file($) {
    my $full_path = shift;

    my @ext = qw/ pl pm md pl6 pm6 /;
    my ( $full_name, undef, $suffix ) = fileparse($full_path, @ext);
    my ( $template, $name );
    $full_name =~ s/\.$//g;

    given ( $suffix ) {
        when ( $suffix =~ /[pl|pl6]$/ ) {
            $template = use_template({
                    script_name => $full_name, 
                    module_name => ucfirst($full_name),
                    template    => 'pl'
                });
        }
        when ( $suffix =~ /[pm|pm6]$/ ) {
            $template = use_template({
                    module_name => ucfirst($full_name),
                    template    => 'pm'
                });
            $full_path = dirname($full_path) . "/" . ucfirst($full_name) . "." . $suffix;
        }
        when ( $full_name =~ 'LICENCE' ) {
            $template = use_template({
                    template => 'lic',
                });
        }
        when ( $full_name =~ '.gitignore' ) {
            $template = use_template({
                    template => 'git',
                });
        }
        when ( $full_name =~ 'README' ) {
            $template = use_template({
                    script_name => $full_name,
                    template    => 'md'
                });
        }
        default {
            croak "No conozco «$full_name»";
        }
    }
    say $full_path;
    save_template($full_path, $template->$*);
}

sub save_template($$) {
    my ( $name, $data ) = @_;

    unless ( -f $name ) {
        open my $fh, '>>', $name;
        print $fh $data;
        close $fh;
    }
}

sub use_template($) {
    my $args = shift;

    my $script_name = $args->%{script_name} // 'meh';
    my $module_name = $args->%{module_name} // 'Meh';
    my $template    = $args->%{template};

    my $year = strftime "%Y", localtime;

    my %templates = (
        pl => 
              <<~END
              #!/usr/bin/env perl
              #
              # $script_name - Description
              #

              use 5.26.0;
              use warnings;
              use autodie;
              use diagnostics;
              use utf8::all;

              #use Data::Dumper::Names;
              use Getopt::Long 'GetOptions';
              use Pod::Usage 'pod2usage';

              use lib 'lib';
              use $module_name;

              my \$help = 0;

              GetOptions(
                  '--help' => \\\$help,
              );

              if (\$help) {
                  pod2usage(2);
              }

              # code goes here :)

              __END__

              =pod
              
              =head1 NAME
              
              $script_name - short description
              
              =head1 SYNOPSIS
              
                  Options
                      --help          Show help. 
              
              =head1 LICENSE
              
              MIT License
              
              =head1 AUTHOR
              
              clasclin - clasclin\@gmail.com
              
              =head1 BUGS
              
              It is perfect, no bugs haha.
              
              =cut

              END
        ,
        pm =>
              <<~END
              package $module_name;

              use 5.26.0;
              use warnings;
              use utf8::all;
              use Exporter 'import';

              our \@EXPORT_OK = qw( );
              our \%EXPORT_TAGS = ( all => \\\@EXPORT_OK );

              # code goes here :)

              1;

              END
        ,
        md =>
              <<~END
              # NAME

              $script_name - description

              # SYNOPSIS

              # DESCRIPTION

              # AUTHOR

              Cristian Sanabria <clasclin at gmail period com>

              # BUGS

              # SEE ALSO

              END
        ,
        git =>
              <<~'END'
              lib/.precomp/*
              !lib
              *swp
              .precomp/*
              END
        ,
        lic => 
              <<~END
              MIT License

              Copyright (c) $year clasclin

              Permission is hereby granted, free of charge, to any person obtaining a copy
              of this software and associated documentation files (the "Software"), to deal
              in the Software without restriction, including without limitation the rights
              to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
              copies of the Software, and to permit persons to whom the Software is
              furnished to do so, subject to the following conditions:

              The above copyright notice and this permission notice shall be included in all
              copies or substantial portions of the Software.

              THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
              IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
              FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
              AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
              LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
              OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
              SOFTWARE.
              END
        ,
    );
    return \$templates{$template};
}

__END__

=pod

=head1 NAME

new-proyect - create the necesary files and directories for a given proyect

=head1 SYNOPSIS

    Options
        --help          Show help. 
        --project-name  Name for the proyect.

=head1 LICENSE

MIT License

=head1 AUTHOR

clasclin - clasclin@gmail.com

=head1 BUGS

It's perfect, no bugs haha.

=cut

